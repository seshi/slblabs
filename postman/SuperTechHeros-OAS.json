{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://api.heroes.jamesmessinger.com"
    }
  ],
  "info": {
    "version": "1.0.27",
    "title": "super-tech-heroes",
    "description": "A REST API for technology-themed superheroes"
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Get API info",
        "description": "This endpoint returns general API info, such as the version number, description, and relevant links.\n",
        "security": [
          {
            "apiKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns API info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIInfo"
                }
              }
            }
          }
        }
      }
    },
    "/schema": {
      "get": {
        "summary": "Get API definition",
        "description": "This endpoint returns the API definition schema. By default, the response is in OpenAPI v3.0 JSON format, but you can specify your desired format via the `Accept` header or an `accept` query parameter.\n",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "description": "You can request a specific OpenAPI version and format. The default is `application/openapi+json;version=3.0`, which returns a OpenAPI v3.0 definition, in JSON format.  You can request another format instead. For example, to request Swagger v2.0 in YAML format, you would set the `Accept` header to `application/openapi+yaml;version=2.0`.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accept",
            "in": "query",
            "description": "You can override the `Accept` header using the `accept` query parameter. This parameter takes the same format as the `Accept` header. For example, to request OpenAPI v2.0 in YAML format, the querystring would be `?accept=application/openapi+yaml;version=2.0`.\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the API schema in the requested format",
            "content": {
              "application/openapi+json;version=3.0": {
                "schema": {
                  "type": "string"
                }
              },
              "application/openapi+yaml;version=3.0": {
                "schema": {
                  "type": "string"
                }
              },
              "application/openapi+json;version=2.0": {
                "schema": {
                  "type": "string"
                }
              },
              "application/openapi+yaml;version=2.0": {
                "schema": {
                  "type": "string"
                }
              },
              "application/postman+json;version=2.0": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/characters": {
      "get": {
        "summary": "Find characters",
        "description": "This endpoint returns all characters by default, or you can filter by `name` and `type` via query parameters.\n",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filters the results by character name. This is a wildcard search, so `?name=man` will reeturn \"Superman\", \"Batman\", and \"Wonder Woman\".\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters the results by character type (i.e. \"hero\", \"sidekick\", or \"villain\").\n",
            "schema": {
              "type": "string",
              "enum": [
                "hero",
                "sidekick",
                "villain"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all characters that matched the filter criteria. If there are no matching characters, then the response is an empty array.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CharacterResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Something is wrong with the request. For example, the `type` query parameter is not a valid character type.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new character",
        "description": "This endpoint creates a new character. For heroes, you can also create the sidekick and/or nemesis at the same time by setting the `sidekick` and/or `nemesis` properties to objects rather than strings.\n",
        "security": [
          {
            "apiKey": []
          }
        ],
        "responses": {
          "201": {
            "description": "The character was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Something is wrong with the request, such as invalid character data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is already an existing character with the same (or very similar) name.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CharacterHierarchy"
              }
            }
          },
          "required": true
        }
      },
      "delete": {
        "summary": "Delete all characters",
        "description": "This endpoint deletes **all** characters.  It's mostly just used during testing, to reset state between each test.\n",
        "security": [
          {
            "apiKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "All charactes were deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "count",
                    "message"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "count": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/characters/{slug}": {
      "parameters": [
        {
          "name": "slug",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "pattern": "^[a-z0-9]+$"
          }
        }
      ],
      "get": {
        "summary": "Get a specific character",
        "description": "This endpoint returns a specific character, given its slug. The slug is the character's name, lowercased, with all non-alphanumeric characters removed. For example, the slug for \"Wonder Woman\" would be \"wonderwoman\".\n",
        "security": [
          {
            "apiKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested character",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Something is wrong with the request, such as invalid character slug.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "There is no character with the specified slug.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a character",
        "description": "This endpoint updates an existing character. Unlike the `POST /characters` endpoint, you _cannot_ update multiple characters at a time.\n",
        "security": [
          {
            "apiKey": []
          }
        ],
        "responses": {
          "201": {
            "description": "The character was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Something is wrong with the request, such as invalid character data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is already an existing character with the same (or very similar) name.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CharacterUpdate"
              }
            }
          },
          "required": true
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "Because this API is meant for demo and training purposes, it doesn't have very strict authentication requirements. You can set the `X-API-Key` header to any alphanumeric value. As long as it's a unique value, you won't have any conflicts with anyone else who's also calling the API.\nAny API calls that _don't_ include an `X-API-Key` header will default to the \"DEMO\" account, which means that conflicts are very likely.\n"
      }
    },
    "schemas": {
      "APIInfo": {
        "type": "object",
        "required": [
          "name",
          "version",
          "description",
          "links"
        ],
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "links": {
            "type": "object",
            "required": [
              "characters",
              "www",
              "schema",
              "docs"
            ],
            "additionalProperties": false,
            "properties": {
              "characters": {
                "type": "string"
              },
              "www": {
                "type": "string"
              },
              "schema": {
                "type": "string"
              },
              "docs": {
                "type": "string"
              }
            }
          }
        }
      },
      "CharacterHierarchy": {
        "type": "object",
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "type": {
            "type": "string",
            "enum": [
              "hero",
              "sidekick",
              "villain"
            ]
          },
          "powers": {
            "type": "array",
            "minItems": 0,
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "weakness": {
            "type": "string",
            "minLength": 0
          },
          "bio": {
            "type": "string",
            "minLength": 0
          },
          "sidekick": {
            "type": "object"
          },
          "nemesis": {
            "type": "object"
          }
        }
      },
      "CharacterUpdate": {
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "type": {
            "type": "string",
            "enum": [
              "hero",
              "sidekick",
              "villain"
            ]
          },
          "powers": {
            "type": "array",
            "minItems": 0,
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "weakness": {
            "type": "string",
            "minLength": 0
          },
          "bio": {
            "type": "string",
            "minLength": 0
          },
          "sidekick": {
            "type": "string",
            "minLength": 0
          },
          "nemesis": {
            "type": "string",
            "minLength": 0
          }
        }
      },
      "CharacterResponse": {
        "type": "object",
        "required": [
          "name",
          "type",
          "powers",
          "weakness",
          "bio",
          "links"
        ],
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "type": {
            "type": "string",
            "enum": [
              "hero",
              "sidekick",
              "villain"
            ]
          },
          "powers": {
            "type": "array",
            "minItems": 0,
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "weakness": {
            "type": "string",
            "minLength": 0
          },
          "bio": {
            "type": "string",
            "minLength": 0
          },
          "links": {
            "type": "object",
            "required": [
              "self"
            ],
            "additionalProperties": false,
            "properties": {
              "self": {
                "type": "string",
                "minLength": 1
              },
              "sidekick": {
                "type": "string",
                "minLength": 1
              },
              "nemesis": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "error",
          "message"
        ],
        "additionalProperties": false,
        "properties": {
          "error": {
            "type": "string",
            "minLength": 1
          },
          "message": {
            "type": "string",
            "minLength": 1
          }
        }
      }
    }
  }
}